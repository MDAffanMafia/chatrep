import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import AdminPanel from './components/AdminPanel';
import './App.css';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userLevel, setUserLevel] = useState(null);

  useEffect(() => {
    // Check if user is already logged in on page load
    const storedUserLevel = localStorage.getItem('userLevel');
    if (storedUserLevel) {
      setIsAuthenticated(true);
      setUserLevel(storedUserLevel);
    }
  }, []);

  const handleLogin = (level) => {
    setIsAuthenticated(true);
    setUserLevel(level);
  };

  const handleLogout = () => {
    localStorage.removeItem('userLevel');
    localStorage.removeItem('username');
    setIsAuthenticated(false);
    setUserLevel(null);
  };

  // Protected route component
  const ProtectedRoute = ({ element, requiredLevel }) => {
    if (!isAuthenticated) {
      return <Navigate to="/login" replace />;
    }
    
    // Check user level if required
    if (requiredLevel && userLevel !== requiredLevel) {
      return <Navigate to="/dashboard" replace />;
    }
    
    return element;
  };

  return (
    <Router>
      <div className="App">
        <Routes>
          <Route 
            path="/login" 
            element={isAuthenticated ? <Navigate to="/dashboard" /> : <Login onLogin={handleLogin} />} 
          />
          <Route 
            path="/dashboard" 
            element={<ProtectedRoute element={<Dashboard onLogout={handleLogout} />} />} 
          />
          <Route 
            path="/admin" 
            element={<ProtectedRoute element={<AdminPanel onLogout={handleLogout} />} requiredLevel="L2" />} 
          />
          <Route path="/" element={<Navigate to="/login" replace />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;
